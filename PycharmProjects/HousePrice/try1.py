import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.feature_selection import SelectKBest, mutual_info_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from functools import partial
from sklearn.ensemble import ExtraTreesClassifier
import seaborn as sn
import matplotlib.pyplot as plt
from sklearn import preprocessing
noedit_train_data = pd.read_csv("train.csv")
train_data = pd.read_csv("train.csv")
test_data = pd.read_csv("test.csv")
train_data.drop('Alley', axis = 1, inplace = True)
train_data.drop('FireplaceQu', axis = 1, inplace = True)
train_data.drop('MiscFeature', axis = 1, inplace = True)
train_data.drop('Fence', axis = 1, inplace = True)
train_data.drop('PoolQC', axis = 1, inplace = True)

test_data.drop('Alley', axis = 1, inplace = True)
test_data.drop('FireplaceQu', axis = 1, inplace = True)
test_data.drop('MiscFeature', axis = 1, inplace = True)
test_data.drop('Fence', axis = 1, inplace = True)
test_data.drop('PoolQC', axis = 1, inplace = True)
#train_data.info()
#print(train_data['BsmtCond'])
train_data['LotFrontage'].fillna(train_data['LotFrontage'].mean(), inplace = True)
train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].mean(), inplace = True)
train_data['MasVnrType'].fillna(method = 'ffill', inplace = True)
train_data['BsmtQual'].fillna(method = 'ffill', inplace = True)
train_data['BsmtCond'].fillna(method = 'ffill', inplace = True)
train_data['BsmtExposure'].fillna(method = 'ffill', inplace = True)
train_data['BsmtFinType1'].fillna(method = 'ffill', inplace = True)
train_data['BsmtFinType2'].fillna(method = 'ffill', inplace = True)
train_data['Electrical'].fillna(method = 'ffill', inplace = True)
train_data['GarageType'].fillna(method = 'ffill', inplace = True)
train_data['GarageYrBlt'].fillna(method = 'ffill', inplace = True)
train_data['GarageFinish'].fillna(method = 'ffill', inplace = True)
train_data['GarageQual'].fillna(method = 'ffill', inplace = True)
train_data['GarageCond'].fillna(method = 'ffill', inplace = True)

test_data['MSZoning'].fillna(method = 'ffill', inplace = True)
test_data['LotFrontage'].fillna(test_data['LotFrontage'].mean(), inplace = True)
test_data['Utilities'].fillna(method = 'ffill', inplace = True)
test_data['Exterior1st'].fillna(method = 'ffill', inplace = True)
test_data['Exterior2nd'].fillna(method = 'ffill', inplace = True)
test_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mean(), inplace = True)
test_data['MasVnrType'].fillna(method = 'ffill', inplace = True)
test_data['BsmtQual'].fillna(method = 'ffill', inplace = True)
test_data['BsmtCond'].fillna(method = 'ffill', inplace = True)
test_data['BsmtExposure'].fillna(method = 'ffill', inplace = True)
test_data['BsmtFinType1'].fillna(method = 'ffill', inplace = True)
test_data['BsmtFinSF1'].fillna(test_data['BsmtFinSF1'].mean(), inplace = True)
test_data['BsmtFinType2'].fillna(method = 'ffill', inplace = True)
test_data['BsmtFinSF2'].fillna(test_data['BsmtFinSF2'].mean(), inplace = True)
test_data['BsmtUnfSF'].fillna(test_data['BsmtUnfSF'].mean(), inplace = True)
test_data['TotalBsmtSF'].fillna(test_data['TotalBsmtSF'].mean(), inplace = True)
test_data['BsmtFullBath'].fillna(test_data['BsmtFullBath'].mean(), inplace = True)
test_data['BsmtHalfBath'].fillna(test_data['BsmtHalfBath'].mean(), inplace = True)
test_data['KitchenQual'].fillna(method = 'ffill', inplace = True)
test_data['Functional'].fillna(method = 'ffill', inplace = True)
#test_data['FireplaceQu'].fillna(method = 'ffill', inplace = True)
test_data['GarageType'].fillna(method = 'ffill', inplace = True)
test_data['GarageYrBlt'].fillna(method = 'ffill', inplace = True)
test_data['GarageFinish'].fillna(method = 'ffill', inplace = True)
test_data['GarageCars'].fillna(test_data['GarageCars'].mean(), inplace = True)
test_data['GarageArea'].fillna(test_data['GarageArea'].mean(), inplace = True)
test_data['GarageQual'].fillna(method = 'ffill', inplace = True)
test_data['GarageCond'].fillna(method = 'ffill', inplace = True)
test_data['SaleType'].fillna(method = 'ffill', inplace = True)

#test_data.info()

le = preprocessing.LabelEncoder()
train_data['MSZoning'] = le.fit_transform(train_data['MSZoning'])
train_data['Street'] = le.fit_transform(train_data['Street'])
train_data['MasVnrType'] = le.fit_transform(train_data['MasVnrType'])
train_data['LotShape'] = le.fit_transform(train_data['LotShape'])
train_data['LandContour'] = le.fit_transform(train_data['LandContour'])
train_data['Utilities'] = le.fit_transform(train_data['Utilities'])
train_data['LotConfig'] = le.fit_transform(train_data['LotConfig'])
train_data['LandSlope'] = le.fit_transform(train_data['LandSlope'])
train_data['Neighborhood'] = le.fit_transform(train_data['Neighborhood'])
train_data['Condition1'] = le.fit_transform(train_data['Condition1'])
train_data['Condition2'] = le.fit_transform(train_data['Condition2'])
train_data['BldgType'] = le.fit_transform(train_data['BldgType'])
train_data['HouseStyle'] = le.fit_transform(train_data['HouseStyle'])
train_data['RoofStyle'] = le.fit_transform(train_data['RoofStyle'])
train_data['RoofMatl'] = le.fit_transform(train_data['RoofMatl'])
train_data['Exterior1st'] = le.fit_transform(train_data['Exterior1st'])
train_data['Exterior2nd'] = le.fit_transform(train_data['Exterior2nd'])
train_data['ExterQual'] = le.fit_transform(train_data['ExterQual'])
train_data['ExterCond'] = le.fit_transform(train_data['ExterCond'])
train_data['Foundation'] = le.fit_transform(train_data['Foundation'])
train_data['BsmtQual'] = le.fit_transform(train_data['BsmtQual'])
train_data['BsmtCond'] = le.fit_transform(train_data['BsmtCond'])
train_data['BsmtExposure'] = le.fit_transform(train_data['BsmtExposure'])
train_data['BsmtFinType1'] = le.fit_transform(train_data['BsmtFinType1'])
train_data['BsmtFinType2'] = le.fit_transform(train_data['BsmtFinType2'])
train_data['Heating'] = le.fit_transform(train_data['Heating'])
train_data['HeatingQC'] = le.fit_transform(train_data['HeatingQC'])
train_data['CentralAir'] = le.fit_transform(train_data['CentralAir'])
train_data['Electrical'] = le.fit_transform(train_data['Electrical'])
train_data['KitchenQual'] = le.fit_transform(train_data['KitchenQual'])
train_data['Functional'] = le.fit_transform(train_data['Functional'])
train_data['GarageType'] = le.fit_transform(train_data['GarageType'])
train_data['GarageFinish'] = le.fit_transform(train_data['GarageFinish'])
train_data['GarageQual'] = le.fit_transform(train_data['GarageQual'])
train_data['GarageCond'] = le.fit_transform(train_data['GarageCond'])
train_data['PavedDrive'] = le.fit_transform(train_data['PavedDrive'])
train_data['SaleType'] = le.fit_transform(train_data['SaleType'])
train_data['SaleCondition'] = le.fit_transform(train_data['SaleCondition'])

test_data['MSZoning'] = le.fit_transform(test_data['MSZoning'])
test_data['Street'] = le.fit_transform(test_data['Street'])
test_data['MasVnrType'] = le.fit_transform(test_data['MasVnrType'])
test_data['LotShape'] = le.fit_transform(test_data['LotShape'])
test_data['LandContour'] = le.fit_transform(test_data['LandContour'])
test_data['Utilities'] = le.fit_transform(test_data['Utilities'])
test_data['LotConfig'] = le.fit_transform(test_data['LotConfig'])
test_data['LandSlope'] = le.fit_transform(test_data['LandSlope'])
test_data['Neighborhood'] = le.fit_transform(test_data['Neighborhood'])
test_data['Condition1'] = le.fit_transform(test_data['Condition1'])
test_data['Condition2'] = le.fit_transform(test_data['Condition2'])
test_data['BldgType'] = le.fit_transform(test_data['BldgType'])
test_data['HouseStyle'] = le.fit_transform(test_data['HouseStyle'])
test_data['RoofStyle'] = le.fit_transform(test_data['RoofStyle'])
test_data['RoofMatl'] = le.fit_transform(test_data['RoofMatl'])
test_data['Exterior1st'] = le.fit_transform(test_data['Exterior1st'])
test_data['Exterior2nd'] = le.fit_transform(test_data['Exterior2nd'])
test_data['ExterQual'] = le.fit_transform(test_data['ExterQual'])
test_data['ExterCond'] = le.fit_transform(test_data['ExterCond'])
test_data['Foundation'] = le.fit_transform(test_data['Foundation'])
test_data['BsmtQual'] = le.fit_transform(test_data['BsmtQual'])
test_data['BsmtCond'] = le.fit_transform(test_data['BsmtCond'])
test_data['BsmtExposure'] = le.fit_transform(test_data['BsmtExposure'])
test_data['BsmtFinType1'] = le.fit_transform(test_data['BsmtFinType1'])
test_data['BsmtFinType2'] = le.fit_transform(test_data['BsmtFinType2'])
test_data['Heating'] = le.fit_transform(test_data['Heating'])
test_data['HeatingQC'] = le.fit_transform(test_data['HeatingQC'])
test_data['CentralAir'] = le.fit_transform(test_data['CentralAir'])
test_data['Electrical'] = le.fit_transform(test_data['Electrical'])
test_data['KitchenQual'] = le.fit_transform(test_data['KitchenQual'])
test_data['Functional'] = le.fit_transform(test_data['Functional'])
test_data['GarageType'] = le.fit_transform(test_data['GarageType'])
test_data['GarageFinish'] = le.fit_transform(test_data['GarageFinish'])
test_data['GarageQual'] = le.fit_transform(test_data['GarageQual'])
test_data['GarageCond'] = le.fit_transform(test_data['GarageCond'])
test_data['PavedDrive'] = le.fit_transform(test_data['PavedDrive'])
test_data['SaleType'] = le.fit_transform(test_data['SaleType'])
test_data['SaleCondition'] = le.fit_transform(test_data['SaleCondition'])
train_data.info()
features = list(train_data.columns)
features.remove('SalePrice')
features.remove('Id')
#features.remove('MSSubClass')
#features.remove('Street')
#features.remove('LandContour')
#features.remove('Utilities')
#features.remove('LotConfig')
#features.remove('LandSlope')
#features.remove('Condition1')
#features.remove('Condition2')
#features.remove('BldgType')
#features.remove('OverallCond')
#features.remove('MasVnrType')
#features.remove('BsmtCond')
#features.remove('BsmtFinType1')
#features.remove('BsmtFinType2')
#features.remove('BsmtFinSF2')
#features.remove('LowQualFinSF')
#features.remove('BsmtHalfBath')
#features.remove('3SsnPorch')
#features.remove('MiscVal')
#features.remove('MoSold')
#features.remove('YrSold')
#features.remove('SaleType')
#train_data.info()

X = train_data[features]
y = train_data['SalePrice']
X.info()
#model = ExtraTreesClassifier()
#model.fit(X,y)
#print(list(zip(features, model.feature_importances_)))
#feat_importances = pd.Series(model.feature_importances_, index=features)
#bestfeat = feat_importances.nlargest(11)
#print(bestfeat)
#plt.show()
test_set = test_data[features]
#bfst = ['BsmtUnfSF','GrLivArea','LotArea','GarageArea','LotFrontage','TotalBsmtSF','YearRemodAdd','YearBuilt','GarageYrBlt','BsmtFinSF1']
#bfst2 = ['BsmtUnfSF','GrLivArea','LotArea','GarageArea','LotFrontage','TotalBsmtSF','YearRemodAdd','YearBuilt','GarageYrBlt','BsmtFinSF1','SalePrice']
kbest = 1
kbestfeatures = []
minmae = 9999999
for i in range(1,70):
    my_score = partial(mutual_info_regression, random_state=0)
    mask = SelectKBest(score_func=my_score, k=i)
    mask.fit(X,y)
    cols = mask.get_support(indices=True)
    new_features = []
    for bool, feature in zip(cols, features):
        if bool:
            new_features.append(feature)
    X1 = train_data[new_features]
    X_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.35, random_state=1)
    model = RandomForestRegressor(n_estimators=100, criterion= 'mae', max_depth=15, random_state=1)
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    mae = mean_absolute_error(y_test,predictions)
    if mae<minmae:
        minmae = mae
        kbest = i
        kbestfeatures = new_features
print(kbestfeatures)
print(minmae)
print(new_features)
print("NUMER OF FEATURES")
print(i)
X = train_data[kbestfeatures]
#X1 = train_data[kbestfeatures]
test_set = test_data[kbestfeatures]
#corrmat = X1.corr()
#print(corrmat)
#mycorrmat = pd.DataFrame(corrmat)
#mycorrmat = mycorrmat.round(3)
#mycorrmat = mycorrmat.to_excel('letscexcel.xlsx', index=False)
#mycorrmat.to_csv('submission.csv',index=False)
#sn.heatmap(corrmat, annot=True)
#plt.show()
model = RandomForestRegressor(n_estimators=100, criterion= 'mae', max_depth=15, random_state=1)
model.fit(X,y)
predictions = model.predict(test_set)
#print(predictions)
output = pd.DataFrame({'Id': test_data.Id, 'SalePrice': predictions})
output.to_csv('MySubmission.csv', index = False )
#print(output)
#print(np.count_nonzero(train_data['MasVnrArea']))